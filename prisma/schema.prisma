datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// -------------------------------
/// Logs (unchanged)
/// -------------------------------

model GoodsInLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  barcode   String
  name      String
  sku       String
  quantity  Int
  location  String
  shelf     String

  @@map("goods_in_logs")
}

model GoodsOutLog {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  barcode   String
  name      String
  sku       String
  quantity  Int
  location  String
  shelf     String

  @@map("goods_out_logs")
}

model IncomingStockLog {
  id           Int      @id @default(autoincrement())
  timestamp    DateTime @default(now())
  barcode      String
  name         String
  sku          String
  expectedDate DateTime
  quantity     Int
  supplier     String

  @@map("incoming_stock_logs")
}

/// -------------------------------
/// Products & Categories
/// -------------------------------

model Product {
  id          Int         @id @default(autoincrement())
  barcode     String      @unique
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  categories  Category[]  // many-to-many via implicit join table

  /// make these optional relations explicitly handle deletions
  supplierId   Int?
  defaultSupplier Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

  locationId   Int?
  defaultLocation Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)

  shelfId      Int?
  defaultShelf Shelf?     @relation(fields: [shelfId], references: [id], onDelete: SetNull)

  @@map("products")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]  // back‑relation

  @@map("categories")
}

/// -------------------------------
/// New master‑data tables
/// -------------------------------

model Supplier {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] // back‑relation

  @@map("suppliers")
}

model Location {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] // back‑relation

  @@map("locations")
}

model Shelf {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[] // back‑relation

  @@map("shelves")
}

/// -------------------------------
/// Users (unchanged)
/// -------------------------------

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  allowedPages String[] @default([])
  createdAt    DateTime @default(now())
}

model MaintenanceItem {
  id             Int             @id @default(autoincrement())
  name           String
  category       String
  supplier       String
  inStock        Int
  threshold      Int

  // ← add this!
  orderRequests  OrderRequest[]
}

model OrderRequest {
  id           Int             @id @default(autoincrement())
  itemId       Int
  item         MaintenanceItem @relation(fields: [itemId], references: [id])
  quantity     Int
  requestedAt  DateTime        @default(now())
}

enum PrinterState {
  online
  offline
  maintenance
}

model Printer {
  id        Int            @id @default(autoincrement())
  name      String
  model     String
  location  String
  status    PrinterState   @default(online)
  lastSeen  DateTime
  logs      PrinterLog[]
}

model PrinterLog {
  id         Int           @id @default(autoincrement())
  printer    Printer       @relation(fields: [printerId], references: [id])
  printerId  Int
  state      PrinterState
  timestamp  DateTime      @default(now())
  notes      String?
}
